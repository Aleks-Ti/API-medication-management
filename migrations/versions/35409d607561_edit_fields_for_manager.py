"""edit fields for manager

Revision ID: 35409d607561
Revises: 458b58035402
Create Date: 2024-11-17 04:26:14.187179

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "35409d607561"
down_revision: Union[str, None] = "458b58035402"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("manager", "start_date",
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column("manager", "finish_date",
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_unique_constraint(None, "manager", ["id"])
    op.drop_constraint("manager_user_id_fkey", "manager", type_="foreignkey")
    op.create_foreign_key(None, "manager", "user", ["user_id"], ["id"], ondelete="CASCADE")
    op.create_unique_constraint(None, "regimen", ["id"])
    op.drop_constraint("regimen_manager_id_fkey", "regimen", type_="foreignkey")
    op.create_foreign_key(None, "regimen", "manager", ["manager_id"], ["id"], ondelete="CASCADE")
    op.create_unique_constraint(None, "user", ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "user", type_="unique")
    op.drop_constraint(None, "regimen", type_="foreignkey")
    op.create_foreign_key("regimen_manager_id_fkey", "regimen", "manager", ["manager_id"], ["id"])
    op.drop_constraint(None, "regimen", type_="unique")
    op.drop_constraint(None, "manager", type_="foreignkey")
    op.create_foreign_key("manager_user_id_fkey", "manager", "user", ["user_id"], ["id"])
    op.drop_constraint(None, "manager", type_="unique")
    op.alter_column("manager", "finish_date",
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column("manager", "start_date",
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    # ### end Alembic commands ###
